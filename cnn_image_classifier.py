# -*- coding: utf-8 -*-
"""CNN_image_classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mIWd7VGBbJIwIvuaKGEFMt7k3XdyyEQZ
"""

import tensorflow as tf
import os

# Avoid OOM errors by setting GPU Memory Consumption Growth
gpus = tf.config.experimental.list_physical_devices('GPU')
for gpu in gpus:
    tf.config.experimental.set_memory_growth(gpu, True)

tf.config.list_physical_devices('GPU')

import cv2
import imghdr

data_dir = '/final_data'

img_extensions=['jpeg','jpg','bmp','png']

import os
import imghdr

def clean_directory(directory):
    removed = 0
    for root, _, files in os.walk(directory):
        for file in files:
            filepath = os.path.join(root, file)
            try:
                img_type = imghdr.what(filepath)
                if img_type not in ['jpeg', 'png', 'bmp', 'gif']:
                    print(f"❌ Removing unsupported format: {filepath}")
                    os.remove(filepath)
                    removed += 1
            except Exception as e:
                print(f"❌ Failed to read: {filepath} — {e}")
                os.remove(filepath)
                removed += 1
    print(f"✅ Removed {removed} invalid or unsupported image(s)")

clean_directory("/final_data")  # or /data depending on your folder

import os
print(os.path.exists("/final_data"))



import numpy as np
from matplotlib import pyplot as plt

data = tf.keras.utils.image_dataset_from_directory('/final_data')

for batch in data.take(1):
    print("✅ Batch loaded:", batch[0].shape)

data_iterator = data.as_numpy_iterator()

batch = data_iterator.next()

fig, ax = plt.subplots(ncols=4, figsize=(20,20))
for idx, img in enumerate(batch[0][:4]):
    ax[idx].imshow(img.astype(int))
    ax[idx].title.set_text(batch[1][idx])

batch[0].shape

data = data.map(lambda x,y:(x/255,y))

data.as_numpy_iterator().next()

train_size = int(len(data)*.7)
val_size = int(len(data)*.2)+1
test_size = int(len(data)*.1)+1

train = data.take(train_size)
val= data.skip(train_size).take(val_size)
test = data.skip(train_size+val_size).take(test_size)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D,Dense,MaxPooling2D,Flatten,Dropout

model = Sequential()

model.add(Conv2D(16, (3,3), activation='relu', input_shape= (256,256,3)))
model.add(MaxPooling2D())
model.add(Dropout(0.25))

model.add(Conv2D(32, (3,3), 1, activation='relu'))
model.add(MaxPooling2D())
model.add(Dropout(0.25))

model.add(Conv2D(16, (3,3), 1, activation='relu'))
model.add(MaxPooling2D())
model.add(Dropout(0.25))

model.add(Flatten())

model.add(Dense(256,activation= 'relu'))
model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='adam',loss=tf.losses.BinaryCrossentropy,metrics=['accuracy'])

from tensorflow.keras.callbacks import EarlyStopping

early_stop = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)

hist = model.fit(train,
                 epochs=30,
                 validation_data=val,
                 )

model.summary()

fig = plt.figure()
plt.plot(hist.history['loss'], color='teal', label='loss')
plt.plot(hist.history['val_loss'], color='orange', label='val_loss')
fig.suptitle('Loss', fontsize=20)
plt.legend(loc="upper left")
plt.show()

fig = plt.figure()
plt.plot(hist.history['accuracy'], color='teal', label='accuracy')
plt.plot(hist.history['val_accuracy'], color='orange', label='val_accuracy')
fig.suptitle('Accuracy', fontsize=20)
plt.legend(loc="upper left")
plt.show()

from tensorflow.keras.metrics import Precision, Recall, BinaryAccuracy

pre = Precision()
re = Recall()
acc = BinaryAccuracy()

for batch in test.as_numpy_iterator():
    X, y = batch
    yhat = model.predict(X)
    pre.update_state(y, yhat)
    re.update_state(y, yhat)
    acc.update_state(y, yhat)

print(pre.result(), re.result(), acc.result())

import cv2

import matplotlib.pyplot as plt

img = cv2.imread('/download.jpg')

if img is None:
    print("❌ Failed to load image. Check the path or file format.")
else:
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Convert BGR to RGB
    plt.imshow(img)
    plt.axis('off')
    plt.show()

resize = tf.image.resize(img, (256,256))
plt.imshow(resize.numpy().astype(int))
plt.show()

yhat = model.predict(np.expand_dims(resize/255, 0))

yhat
if yhat > 0.5:
  print("Person is sad")
else:
  print("Person is happy")

yhat

